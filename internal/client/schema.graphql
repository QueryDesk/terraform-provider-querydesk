schema {
  mutation: RootMutationType
  query: RootQueryType
}

"The result of the :delete_database mutation"
type DeleteDatabaseResult {
  "The record that was successfully deleted"
  result: Database

  "Any errors generated, if the mutation failed"
  errors: [MutationError]
}

"The result of the :update_database mutation"
type UpdateDatabaseResult {
  "The successful result of the mutation"
  result: Database

  "Any errors generated, if the mutation failed"
  errors: [MutationError]
}

input UpdateDatabaseInput {
  name: String
  adapter: String
  hostname: String
  database: String
  ssl: Boolean
  restrictAccess: Boolean
  cacertfile: String
  keyfile: String
  certfile: String
  agentId: String
}

"The result of the :create_database mutation"
type CreateDatabaseResult {
  "The successful result of the mutation"
  result: Database

  "Any errors generated, if the mutation failed"
  errors: [MutationError]
}

input CreateDatabaseInput {
  name: String!
  adapter: String!
  hostname: String!
  database: String!
  ssl: Boolean
  restrictAccess: Boolean
  cacertfile: String
  keyfile: String
  certfile: String
  agentId: String
}

type Database {
  id: ID!
  name: String!
  adapter: String!
  hostname: String!
  database: String!
  ssl: Boolean!
  restrictAccess: Boolean!
}

"An error generated by a failed mutation"
type MutationError {
  "The human readable error message"
  message: String

  "A shorter error message, with vars not replaced"
  shortMessage: String

  "Replacements for the short message"
  vars: Json

  "An error code for the given error"
  code: String

  "The field or fields that produced the error"
  fields: [String]
}

type RootQueryType {
  database(
    "The id of the record"
    id: ID!
  ): Database
}

type RootMutationType {
  createDatabase(input: CreateDatabaseInput): CreateDatabaseResult
  updateDatabase(id: ID, input: UpdateDatabaseInput): UpdateDatabaseResult
  deleteDatabase(id: ID): DeleteDatabaseResult
}

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json
